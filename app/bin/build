#!/usr/bin/env node
"use strict";

exports.command = {
    description: [
                  'Create barcode fonts for different barcode standards.'
                , '[codetype] is either "Code128" or "Code39".'
                , '[ufodir] is the path where the UFO directory will be created, must not exist.'
               ].join('\n')
  , arguments: '[codetype] [ufodir]'
};

if (require.main === module) {

var requirejs = require('requirejs')
  , configure = requirejs('./node-config')
  , path = require('path')
  , program = require('commander')
  ;
configure(requirejs);

program._name = path.basename(process.argv[1]).replace('-', ' ');
program.arguments(exports.command.arguments)
    .description(exports.command.description);

requirejs([
    'Atem-IO/io/staticNodeJS'
  , 'LibreBarcode/builder'
  , 'fontkit'
], function (
    io
  , builder
  , fontkit
) {

    function main (codetype, ufodir) {
        if(!ufodir)
            throw new Error('Please suppply [ufodir] argument.');
        // Not entirely sure if this is actually needed but it may help
        // to avoid mistakes. In the end, we don't want to update existing
        // ufos but create new ones.
        if(io.pathExists(false, ufodir))
            throw new Error('[ufodir] must not exist: "'+ufodir+'".');
        io.ensureDir(false, ufodir);

        var parameters = program.parameters || {}
          , fontinfo =  program.fontinfo || {}
          ;
        parameters.force = program.force || parameters.force || false;
        builder(io, codetype, ufodir, program.fontbelow, fontinfo, parameters);
    }

    program.action(main);
    program .option('-f, --fontbelow <path>', 'A font to write glyphs '
                            + 'below the barcode.', fontkit.openSync);

    program.option('--force', 'Run the program regardless of parameter '
                            + 'validation errors (CAUTION: may produce '
                            + 'bad results or break the built process).');
    function parseJSON(name, data) {
        var params;
        try {
            params = JSON.parse(data);
        }
        catch(err) {
            console.warn('Can\'t parse '+name+'. > ',data);
            throw err
        }
        if( params.toString() !== '[object Object]')
            throw new Error (name+' must be an object, but got: ' + params.toString());
        return params;
    }
    program.option('-p, --parameters <json>', 'JSON string (an object) with '
                            + 'parameters for the code-type builder.',
                  parseJSON.bind(null, '--parameters')
                  );
    program.option('-i, --fontinfo <json>', 'JSON string (an object) with '
                            + 'fontinfo data for the UFO.',
                  parseJSON.bind(null, '--fontinfo')
                  );
    program.parse(process.argv);
});

}
