#!/usr/bin/env bash
# execute like this:
#   $ rm -rf sources/* autohinted master_ttf fonts/*; # clean up, if needed.
#   $ ./app/bin/buildAll


cd `dirname $BASH_SOURCE`/../../;
SOURCE_DIR=`pwd`/sources
FONTS_DIR=`pwd`/fonts

mkdir -p $SOURCE_DIR
mkdir -p $FONTS_DIR

TEXT_BELOW_FONT="./app/assets/Inconsolata-Regular.ttf"
BUILD="./app/bin/build"

FAMILY_BASE_NAME="Libre Barcode"
FILE_BASENAME="LibreBarcode"

UNITS_PER_EM=1000
ASCENDER=600
DESCENDER=-400
STYLE_NAME="Regular"
STYLEMAP_STYLE_NAME="regular"
X_HEIGHT=400
CAP_HEIGHT=590
VENDOR_ID="GRCR"
LICENSE='This Font Software is licensed under the SIL Open Font '\
'License, Version 1.1. This license is available with a FAQ at: http://scripts.sil.org/OFL'
LICENSE_URL='http://scripts.sil.org/OFL'
COPYRIGHT="Copyright 2017 The $FAMILY_BASE_NAME Project Authors (lasse@graphicore.de)"
VERSION="Version 1.003"
VERSION_MAJOR=1
VERSION_MINOR=3

# usWinAscent from 800 to 682 ???
# OS/2 sTypoLineGap is not equal to 0
# fsType is a legacy DRM-related field from the 80's and must be zero (disabled) in all fonts. Changes that must be applied to this font: OS/2 fsType from 4 to 0
# Font contains the first few mandatory glyphs (.null or NULL, CR and space)?
#       Warning: Font is missing glyphs for the following mandatory codepoints: 0x0000, 0x000D.
# Digital Signature exists?
#       ERROR: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly.

FONTINFO_CODE39=$(cat <<EOT
{
    "familyName": "${FAMILY_BASE_NAME} 39"
  , "styleMapFamilyName": "${FAMILY_BASE_NAME} 39"
  , "styleMapStyleName": "${STYLEMAP_STYLE_NAME}"
  , "styleName": "${STYLE_NAME}"
  , "unitsPerEm": ${UNITS_PER_EM}
  , "ascender": ${ASCENDER}
  , "descender": ${DESCENDER}
  , "xHeight": ${X_HEIGHT}
  , "capHeight": ${CAP_HEIGHT}
  , "openTypeOS2Type": []
  , "openTypeOS2VendorID": "${VENDOR_ID}"
  , "openTypeNameLicense": "${LICENSE}"
  , "openTypeNameLicenseURL": "${LICENSE_URL}"
  , "openTypeNameVersion": "${VERSION}"
  , "copyright": "${COPYRIGHT}"
  , "versionMajor": ${VERSION_MAJOR}
  , "versionMinor": ${VERSION_MINOR}
  , "openTypeOS2TypoLineGap": 0
}
EOT
)

# This is not used in this build currently
PARAMETERS_CODE39=$(cat <<EOT
{
    "example": 123
}
EOT
)

FONTINFO_CODE39TEXT=$(cat <<EOT
{
    "familyName": "${FAMILY_BASE_NAME} 39 Text"
  , "styleMapFamilyName": "${FAMILY_BASE_NAME} 39 Text"
  , "styleMapStyleName": "${STYLEMAP_STYLE_NAME}"
  , "styleName": "${STYLE_NAME}"
  , "unitsPerEm": ${UNITS_PER_EM}
  , "ascender": ${ASCENDER}
  , "descender": ${DESCENDER}
  , "xHeight": ${X_HEIGHT}
  , "capHeight": ${CAP_HEIGHT}
  , "openTypeOS2Type": []
  , "openTypeOS2VendorID": "${VENDOR_ID}"
  , "openTypeNameLicense": "${LICENSE}"
  , "openTypeNameLicenseURL": "${LICENSE_URL}"
  , "openTypeNameVersion": "${VERSION}"
  , "copyright": "${COPYRIGHT}"
  , "versionMajor": ${VERSION_MAJOR}
  , "versionMinor": ${VERSION_MINOR}
  , "openTypeOS2TypoLineGap": 0
}
EOT
)

FONTINFO_CODE39EXTENDED=$(cat <<EOT
{
    "familyName": "${FAMILY_BASE_NAME} 39 Extended"
  , "styleMapFamilyName": "${FAMILY_BASE_NAME} 39 Extended"
  , "styleMapStyleName": "${STYLEMAP_STYLE_NAME}"
  , "styleName": "${STYLE_NAME}"
  , "unitsPerEm": ${UNITS_PER_EM}
  , "ascender": ${ASCENDER}
  , "descender": ${DESCENDER}
  , "xHeight": ${X_HEIGHT}
  , "capHeight": ${CAP_HEIGHT}
  , "openTypeOS2Type": []
  , "openTypeOS2VendorID": "${VENDOR_ID}"
  , "openTypeNameLicense": "${LICENSE}"
  , "openTypeNameLicenseURL": "${LICENSE_URL}"
  , "openTypeNameVersion": "${VERSION}"
  , "copyright": "${COPYRIGHT}"
  , "versionMajor": ${VERSION_MAJOR}
  , "versionMinor": ${VERSION_MINOR}
  , "openTypeOS2TypoLineGap": 0
}
EOT
)

FONTINFO_CODE39EXTENDEDTEXT=$(cat <<EOT
{
    "familyName": "${FAMILY_BASE_NAME} 39 Extended Text"
  , "styleMapFamilyName": "${FAMILY_BASE_NAME} 39 Extended Text"
  , "styleMapStyleName": "${STYLEMAP_STYLE_NAME}"
  , "styleName": "${STYLE_NAME}"
  , "unitsPerEm": ${UNITS_PER_EM}
  , "ascender": ${ASCENDER}
  , "descender": ${DESCENDER}
  , "xHeight": ${X_HEIGHT}
  , "capHeight": ${CAP_HEIGHT}
  , "openTypeOS2Type": []
  , "openTypeOS2VendorID": "${VENDOR_ID}"
  , "openTypeNameLicense": "${LICENSE}"
  , "openTypeNameLicenseURL": "${LICENSE_URL}"
  , "openTypeNameVersion": "${VERSION}"
  , "copyright": "${COPYRIGHT}"
  , "versionMajor": ${VERSION_MAJOR}
  , "versionMinor": ${VERSION_MINOR}
  , "openTypeOS2TypoLineGap": 0
}
EOT
)

FONTINFO_CODE128=$(cat <<EOT
{
    "familyName": "${FAMILY_BASE_NAME} 128"
  , "styleMapFamilyName": "${FAMILY_BASE_NAME} 128"
  , "styleMapStyleName": "${STYLEMAP_STYLE_NAME}"
  , "styleName": "${STYLE_NAME}"
  , "unitsPerEm": ${UNITS_PER_EM}
  , "ascender": ${ASCENDER}
  , "descender": ${DESCENDER}
  , "xHeight": ${X_HEIGHT}
  , "capHeight": ${CAP_HEIGHT}
  , "openTypeOS2Type": []
  , "openTypeOS2VendorID": "${VENDOR_ID}"
  , "openTypeNameLicense": "${LICENSE}"
  , "openTypeNameLicenseURL": "${LICENSE_URL}"
  , "openTypeNameVersion": "${VERSION}"
  , "copyright": "${COPYRIGHT}"
  , "versionMajor": ${VERSION_MAJOR}
  , "versionMinor": ${VERSION_MINOR}
  , "openTypeOS2TypoLineGap": 0
}
EOT
)

FONTINFO_CODE128TEXT=$(cat <<EOT
{
    "familyName": "${FAMILY_BASE_NAME} 128 Text"
  , "styleName": "${STYLE_NAME}"
  , "styleMapFamilyName": "${FAMILY_BASE_NAME} 128 Text"
  , "styleMapStyleName": "${STYLEMAP_STYLE_NAME}"
  , "unitsPerEm": ${UNITS_PER_EM}
  , "ascender": ${ASCENDER}
  , "descender": ${DESCENDER}
  , "xHeight": ${X_HEIGHT}
  , "capHeight": ${CAP_HEIGHT}
  , "openTypeOS2Type": []
  , "openTypeOS2VendorID": "${VENDOR_ID}"
  , "openTypeNameLicense": "${LICENSE}"
  , "openTypeNameLicenseURL": "${LICENSE_URL}"
  , "openTypeNameVersion": "${VERSION}"
  , "copyright": "${COPYRIGHT}"
  , "versionMajor": ${VERSION_MAJOR}
  , "versionMinor": ${VERSION_MINOR}
  , "openTypeOS2TypoLineGap": 0
}
EOT
)

TARGETS=(CODE39 CODE39TEXT CODE39EXTENDED CODE39EXTENDEDTEXT CODE128 CODE128TEXT)
              # UFO_BASE CODE_TYPE USEFONT
TARGET_CODE39=("Code39" "Code39" 0 )
TARGET_CODE39TEXT=("Code39Text" "Code39" 1)
TARGET_CODE39EXTENDED=("Code39Extended" "Code39Extended" 0 )
TARGET_CODE39EXTENDEDTEXT=("Code39ExtendedText" "Code39Extended" 1)
TARGET_CODE128=("Code128" "Code128" 0)
TARGET_CODE128TEXT=("Code128Text" "Code128" 1)

for TARGET in ${TARGETS[@]}; do
    _FONTINFO_DATA_REFERENCE="FONTINFO_$TARGET"[@]
    FONTINFO=( "${!_FONTINFO_DATA_REFERENCE}" )

    _PARAMETERS_DATA_REFERENCE="PARAMETERS_$TARGET"[@]
    PARAMETERS=( "${!_PARAMETERS_DATA_REFERENCE}")
    if [ "${#PARAMETERS[@]}" -eq 0 ];then
        PARAMETERS='{}'
    fi

    _TARGET_DATA_REFERENCE="TARGET_$TARGET"[@]
    TARGET_DATA=( "${!_TARGET_DATA_REFERENCE}" ) # copies the list
    UFO_BASE=${TARGET_DATA[0]}
    UFO_DIR="$SOURCE_DIR/$FILE_BASENAME${UFO_BASE}-Regular.ufo"
    CODE_TYPE=${TARGET_DATA[1]}
    USEFONT=${TARGET_DATA[2]}
    FONTARG=""
    if [ $USEFONT -eq 1 ];then
        FONTARG=" --fontbelow $TEXT_BELOW_FONT "
    fi

    $BUILD $CODE_TYPE $UFO_DIR --fontinfo "$FONTINFO" --parameters "$PARAMETERS" $FONTARG
    fontmake -u $UFO_DIR --production-names --keep-overlaps --keep-direction -a"-I" -o ttf

done

cp autohinted/master_ttf/* fonts && \
cp OFL.txt fonts && \
rm -rf master_ttf autohinted
ls fonts

FILES=$(find fonts -type f -name "*.ttf")
fontbakery fix-dsig --autofix $FILES;
